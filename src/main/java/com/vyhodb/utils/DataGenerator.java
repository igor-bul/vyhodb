/*
 * MIT License
 *
 * Copyright (c) 2015-present Igor Vykhodtsev
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.vyhodb.utils;

import java.math.BigDecimal;
import java.util.Date;

import com.vyhodb.space.IndexDescriptor;
import com.vyhodb.space.IndexedField;
import com.vyhodb.space.Space;
import com.vyhodb.space.Record;

/**
 * Provides static methods for generating sample data.
 * <p>
 * Class methods generate two different samples with different data models:
 * Orders and Hierarchy samples.
 * 
 * <h5>Orders sample</h5>
 * <p>
 * Orders sample is generated by {@linkplain DataGenerator#generate(Record)}
 * method. Diagram below shows data model for this sample:
 * <p>
 * <img src="./doc-files/OrderModel.png" />
 * <p>
 * Diagram below shows records with fields and links which are created as a
 * result of Order data model generating:
 * <p>
 * <img src="./doc-files/OrderData.png" />
 * 
 * <H5>Hierarchy sample</h5>
 * <p>
 * Hierarchy sample is used for illustrate how vyhodb dials with hierarchical
 * data. It is generated by method {@linkplain #generateHierarchy(Record)}.
 * <p>
 * Hierarchy data model:
 * <p>
 * <img src="./doc-files/HierarchyModel.png" />
 * <p>
 * Hierarchy record diagram:
 * <p>
 * <img src="./doc-files/HierarchyData.png" />
 * 
 * @author Igor Vykhodtsev
 * @since vyhodb 0.9.0
 */
public abstract class DataGenerator {

    /**
     * Generates Order sample.
     * 
     * @param root
     *            sample's root Record.
     */
    @SuppressWarnings("deprecation")
    public static void generate(Record root) {
        root.removeChildren("product2root");
        root.removeChildren("order2root");

        if (!root.containsIndex("order2root.Customer")) {
            IndexedField field = new IndexedField("Customer", String.class);
            IndexDescriptor descriptor = new IndexDescriptor("order2root.Customer", "order2root", field);
            root.createIndex(descriptor);
        }

        Record product1 = newProduct(root, "Product 1", new BigDecimal("12.45"));
        Record product2 = newProduct(root, "Product 2", new BigDecimal("1456.99"));
        Record product3 = newProduct(root, "Product 3", new BigDecimal("58.99"));

        Record order1 = newOrder(root, "Customer 1", new Date(115, 4, 18));
        newItem(order1, product1, 5);
        newItem(order1, product2, 10);
        newItem(order1, product3, 15);

        Record order2 = newOrder(root, "Customer 2", new Date(115, 4, 19));
        newItem(order2, product3, 100);

        Record order3 = newOrder(root, "Customer 3", new Date(115, 4, 20));
        newItem(order3, product1, 30);
        newItem(order3, product2, 30);
        newItem(order3, product3, 30);
    }

    /**
     * Generates Hierarchy sample.
     * 
     * @param root
     *            sample's root Record.
     */
    public static void generateHierarchy(Record root) {
        Space space = root.getSpace();

        Record allGroups = newGroup(space, null, "All Groups");
        allGroups.setParent("group2root", root);

        Record group1 = newGroup(space, allGroups, "Group 1");
        Record group11 = newGroup(space, group1, "Group 1.1");
        Record group12 = newGroup(space, group1, "Group 1.2");
        Record group2 = newGroup(space, allGroups, "Group 2");

        newHierarchyProduct(group11, "Product A", BigDecimal.valueOf(12.34));
        newHierarchyProduct(group12, "Product B", BigDecimal.valueOf(5.23));
        newHierarchyProduct(group12, "Product C", BigDecimal.valueOf(26.87));
        newHierarchyProduct(group2, "Product D", BigDecimal.valueOf(99.99));
    }

    /**
     * Creates new product group
     * 
     * @param space
     * @param parentGroup
     * @param name
     * @return record which represents created group
     */
    private static Record newGroup(Space space, Record parentGroup, String name) {
        Record group = space.newRecord();
        group.setField("Name", name);
        if (parentGroup != null) {
            group.setParent("parent_group", parentGroup);
        }

        return group;
    }

    /**
     * Creates new product for hierarchy sample.
     * 
     * @param parentGroup
     * @param name
     * @param price
     * @return record which represents created hierarchy product
     */
    private static Record newHierarchyProduct(Record parentGroup, String name, BigDecimal price) {
        Space space = parentGroup.getSpace();

        Record product = space.newRecord();
        product.setField("Name", name);
        product.setField("Price", price);
        product.setParent("product2group", parentGroup);

        return product;
    }

    /**
     * Creates new order item.
     * 
     * @param order
     * @param product
     * @param count
     * @return order item record
     */
    private static Record newItem(Record order, Record product, int count) {
        BigDecimal price = product.getField("Price");
        Space space = order.getSpace();

        Record item = space.newRecord();
        item.setField("Count", count);
        item.setField("Cost", price.multiply(BigDecimal.valueOf(count)));
        item.setParent("item2order", order);
        item.setParent("item2product", product);

        return item;
    }

    /**
     * Creates new order.
     * 
     * @param root
     * @param customer
     * @param orderDate
     * @return record which represents created order
     */
    private static Record newOrder(Record root, String customer, Date orderDate) {
        Space space = root.getSpace();

        Record order = space.newRecord();
        order.setField("Customer", customer);
        order.setField("Date", orderDate);
        order.setParent("order2root", root);

        return order;
    }

    /**
     * Creates new product
     * 
     * @param root
     * @param name
     * @param price
     * @return record which represents created product
     */
    private static Record newProduct(Record root, String name, BigDecimal price) {
        Space space = root.getSpace();

        Record product = space.newRecord();
        product.setField("Name", name);
        product.setField("Price", price);
        product.setParent("product2root", root);

        return product;
    }
}

/*
 * MIT License
 *
 * Copyright (c) 2015-present Igor Vykhodtsev
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.vyhodb.f;

import static com.vyhodb.f.CommonFactory.composite;

import com.vyhodb.f.print.StartPrintJson;
import com.vyhodb.f.print.StartPrintSimple;
import com.vyhodb.utils.DataGenerator;

/**
 * Provides static methods which construct functions for printing record graph.
 * <p>
 * To construct print function do the following steps:
 * <p>
 * <ol>
 * <li>Construct record navigation function, which specifies traversing route
 * for printed graph. See {@linkplain NavigationFactory}.
 * <li>Wrap record navigation function by one of the function from this class.
 * </ol>
 * 
 * <p>
 * This class provides different functions for different output formats:
 * <ul>
 * <li>JSON
 * <li>Simple
 * </ul>
 * 
 * <p>
 * Simple format uses {@linkplain com.vyhodb.space.Record#toString()} to print record's fields.
 * Links (parent and children) are printed as separate lines with arrow
 * character, which specifies whether this link is child (&#x2190;) or parent
 * (&#x2192;).
 * 
 * <p>
 * Examples below uses sample data, generated by
 * {@linkplain DataGenerator#generate(com.vyhodb.space.Record)}.
 * 
 * <h5>Simple example</h5>
 * Code fragment:
 * 
 * <pre>
 *  ...
 *  Record root = space.getRecord(0);
 *  DataGenerator.generate(root);
 *           
 *  F print = 
 *      <strong>startPrint</strong>(
 *          search("order2root.Customer", equal("Customer 1"),
 *              children("item2order",
 *                  parent("item2product")
 *              )
 *          )
 *  );
 *           
 *  System.out.println(print.eval(root));
 *  ...
 * </pre>
 * 
 * Output:
 * 
 * <pre>
 *    {} id=0
 *     "order2root" &#x2190;
 *         {Customer="Customer 1", Date="Mon May 18 00:00:00 BRT 2015"} id=556
 *             "item2order" &#x2190;
 *                 {Cost=62.25, Count=5} id=589
 *                     "item2product" &#x2192;
 *                         {Name="Product 1", Price=12.45} id=523
 *                 {Cost=14569.90, Count=10} id=600
 *                     "item2product" &#x2192;
 *                         {Name="Product 2", Price=1456.99} id=534
 *                 {Cost=884.85, Count=15} id=611
 *                     "item2product" &#x2192;
 *                         {Name="Product 3", Price=58.99} id=545
 * </pre>
 * 
 * <h5>JSON Example</h5>
 * Code fragment:
 * 
 * <pre>
 *  ...
 *  Record root = space.getRecord(0);
 *  DataGenerator.generate(root);
 *           
 *  F print = 
 *      <strong>startPrintJson</strong>(
 *          search("order2root.Customer", equal("Customer 1"),
 *              children("item2order",
 *                  parent("item2product")
 *              )
 *          )
 *  );
 *           
 *  System.out.println(print.eval(root));
 *  ...
 * </pre>
 * 
 * Output:
 * 
 * <pre>
 * {
 *     "id":0,
 *     "order2root":[
 *         {
 *             "id":556,
 *             "Customer":"Customer 1",
 *             "Date":"Mon May 18 00:00:00 BRT 2015",
 *             "item2order":[
 *                 {
 *                     "id":589,
 *                     "Cost":62.25,
 *                     "Count":5,
 *                     "item2product":
 *                         {
 *                             "id":523,
 *                             "Name":"Product 1",
 *                             "Price":12.45
 *                         }
 *                 },
 *                 {
 *                     "id":600,
 *                     "Cost":14569.90,
 *                     "Count":10,
 *                     "item2product":
 *                         {
 *                             "id":534,
 *                             "Name":"Product 2",
 *                             "Price":1456.99
 *                         }
 *                 },
 *                 {
 *                     "id":611,
 *                     "Cost":884.85,
 *                     "Count":15,
 *                     "item2product":
 *                         {
 *                             "id":545,
 *                             "Name":"Product 3",
 *                             "Price":58.99
 *                         }
 *                 }
 *             ]
 *         }
 *     ]
 * }
 * </pre>
 * 
 * @author Igor Vykhodtsev
 * @since vyhodb 0.9.0
 */
public class PrintFactory {

    /**
     * Returns string which shows traversed record graph in Simple format.
     * <p>
     * The same as {@linkplain #startPrint(String[], F...) startPrint(null,
     * next)}.
     * 
     * @param next
     *            record navigation functions
     * @return string which shows traversed record graph in Simple format.
     */
    public static F startPrint(F... next) {
        return new StartPrintSimple(null, composite(next));
    }

    /**
     * Returns string which shows traversed record graph in Simple format.
     * 
     * @param fieldsFilter
     *            if not null, then only specified record fields are included in
     *            output string
     * @param next
     *            record navigation functions
     * @return string which shows traversed record graph in Simple format
     */
    public static F startPrint(String[] fieldsFilter, F... next) {
        return new StartPrintSimple(fieldsFilter, composite(next));
    }

    /**
     * Returns string, which shows traversed record graph in JSON format.
     * <p>
     * The same as {@linkplain #startPrintJson(String[], boolean, F...)
     * startPrintJson(null, formatted, next)}.
     * 
     * @param formatted
     *            specifies whether JSON string is formatted or not
     * @param next
     *            record navigation functions
     * @return string, which shows traversed record graph in JSON format
     */
    public static F startPrintJson(boolean formatted, F... next) {
        return new StartPrintJson(null, formatted, composite(next));
    }

    /**
     * Returns string, which shows traversed record graph in JSON format.
     * <p>
     * The same as {@linkplain #startPrintJson(String[], boolean, F...)
     * startPrintJson(null, true, next)}.
     * 
     * @param next
     *            record navigation functions
     * @return string, which shows traversed record graph in JSON format
     */
    public static F startPrintJson(F... next) {
        return new StartPrintJson(null, true, composite(next));
    }

    /**
     * Returns string, which shows traversed record graph in JSON format.
     * 
     * @param fieldsFilter
     *            if not null, then only specified record fields are included in
     *            output JSON string
     * @param formatted
     *            specifies whether JSON string is formatted or not
     * @param next
     *            record navigation functions
     * @return string, which shows traversed record graph in JSON format
     */
    public static F startPrintJson(String[] fieldsFilter, boolean formatted, F... next) {
        return new StartPrintJson(fieldsFilter, formatted, composite(next));
    }

    /**
     * Returns string, which shows traversed record graph in JSON format.
     * <p>
     * The same as {@linkplain #startPrintJson(String[], boolean, F...)
     * startPrintJson(fieldsFilter, true, next)}.
     * 
     * @param fieldsFilter
     *            if not null, then only specified record fields are included in
     *            output JSON string
     * @param next
     *            record navigation functions
     * @return string, which shows traversed record graph in JSON format
     */
    public static F startPrintJson(String[] fieldsFilter, F... next) {
        return new StartPrintJson(fieldsFilter, true, composite(next));
    }
}
